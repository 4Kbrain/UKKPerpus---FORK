import { getServerSession } from "#auth";
import prisma from "~/lib/prisma";

export default defineEventHandler(async (event) => {
  const session = await getServerSession(event);

  if (!session?.user) {
    throw createError({ statusCode: 401, statusMessage: "Unauthorized" });
  }
  const userId = session.user.id;


  const existingUser = await prisma.user.findUnique({
    where: { id: userId },
  });
  
  if (!existingUser) {
    throw createError({ statusCode: 400, statusMessage: "User not found" });
  }  
  
  console.log(userId);

  // Baca request body dengan readBody
  const body = await readBody(event);
  console.log("Request body:", body);
  
  const bookId = body?.bookId;
  
  if (!bookId || typeof bookId !== "string") {
    throw createError({ statusCode: 400, statusMessage: "Invalid bookId format" });
  }

  const existingFavorit = await prisma.favorit.findFirst({
    where: {
      bookId,
    }
  })

  if(existingFavorit) {
    throw createError({ statusCode: 400, statusMessage: "Book already favorited"})
  }

  try {
    const favorit = await prisma.favorit.create({
      data: {
        userId,
        bookId,
      },
      include: {
        book: true,
      },
    });

    console.log(favorit)

    return favorit;
  } catch (error) {
    console.error("Error creating favorit:", error);
    throw createError({
      statusCode: 500,
      statusMessage: "Internal Server Error",
    });
  }
});
